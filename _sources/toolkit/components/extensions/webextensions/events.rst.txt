Implementing an event
=====================
Like a function, an event requires a definition in the schema and
an implementation in Javascript inside an instance of ExtensionAPI.

Declaring an event in the API schema
------------------------------------
The definition for a simple event looks like this:

.. code-block:: json

   [
     {
       "namespace": "myapi",
       "events": [
         {
           "name": "onSomething",
           "description": "Description of the event",
           "parameters": [
             {
               "name": "param1",
               "description": Description of the first callback parameter",
               "type": "number"
             }
           ]
         }
       ]
     }
   ]

This fragment defines an event that is used from an extension with
code such as:

.. code-block:: js

   browser.myapi.onSomething.addListener((param1) => {
     console.log(`Something happend: ${param1}`);
   });

Note that the schema syntax looks similar to that for a function,
but for an event, the ``parameters`` property specifies the arguments
that will be passed to a listener.

Implementing an event
---------------------
Just like with functions, defining an event in the schema causes
wrappers to be automatically created and exposed to an extensions'
appropriate Javascript contexts.
An event appears to an extension as an object with three standard
function properties: ``addListener()``, ``removeListener()``,
and ``hasListener()``.
Also like functions, if an API defines an event but does not implement
it in a child process, the wrapper in the child process effectively
proxies these calls to the implementation in the main process.

A helper class called
`EventManager <reference.html#eventmanager-class>`_ makes implementing
events relatively simple.  Full reference documentation is available
from the link above but a simple event implementation looks like:

.. code-block:: js

   class myapi extends ExtensionAPI {
     getAPI(context) {
       return {
         myapi: {
           onSomething: new EventManager(context, "myapi.onSomething", fire => {
             const observer = () => {
               fire.async(42);
             };
             Services.obs.addObserver(observer, "some-event");
             return () => {
               Services.obs.removeObserver(observer, "some-event");
             };
           }).api()
         }
       }
     }
   }

*XXX what more to say about this*

Implementing an event in the child process
------------------------------------------
*XXX similar to functions, also context.childManager.getParentEvent()*

Handling extra arguments to addListener()
-----------------------------------------
XXX explain, show some sample code

Handling listener return values
-------------------------------
XXX explain, show some sample code
